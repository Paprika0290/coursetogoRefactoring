<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.coursetogo.mapper.review.CourseReviewMapper">

 	<!-- 코스리뷰 Id로 코스리뷰 검색 -->
 	<select id="getCourseReviewByReviewId" parameterType="_int" resultType="CourseReviewDTO">
         SELECT course_review_id AS courseReviewId,
                user_id AS userId,
                course_id AS courseId,
                course_score AS courseScore,
                content AS content,
                review_date AS reviewDate
		FROM course_review
 		WHERE course_review_id = #{courseReviewId}
 	</select>
 	
 	<!-- 코스Id로 코스리뷰 검색 -->
 	<select id="getCourseReviewByCourseId" parameterType="_int" resultType="CourseReviewDTO">
 		SELECT course_score as courseScore, content, course_review_id as courseReviewId
 		FROM course_review
 		WHERE course_id = #{courseId}
 	</select>
 	
 	<!-- 코스Id로 코스리뷰 개수 확인 -->
 	<select id= "getCourseReviewCountByCourseId" parameterType="_int" resultType="_int">
 		SELECT count(course_review_id)
 		FROM course_review
 		WHERE course_id = #{courseId}
 	</select>
 	
	<!-- userId로 CourseReview 객체 리스트 반환 -->
 	<select id="getCourseReviewByUserId" parameterType="_int" resultType="CourseReviewDTO">
 		SELECT course_review_id AS courseReviewId,
 			   user_id AS userId,
 			   course_id AS courseId,
 			   course_score AS courseScore,
 			   content AS content,
 			   review_date AS reviewDate
 		FROM course_review
 		WHERE user_id = #{userId}
 	</select>	
 	
 	<!-- userId + courseId로 코스리뷰 검색 -->
    <select id="getCourseReviewByUserIdAndCourseId" parameterType="_int" resultType="CourseReviewDTO">
         SELECT course_review_id AS courseReviewId,
                user_id AS userId,
                course_id AS courseId,
                course_score AS courseScore,
                content AS content,
                review_date AS reviewDate
         FROM course_review
         WHERE user_id = #{userId}
           AND course_id = #{courseId}
     </select>         
 	
    <!-- 코스리뷰 등록 -->
 	<insert id="insertCourseReview" parameterType="CourseReviewDTO">
 		INSERT INTO course_review (course_review_id, course_id, user_id, content,review_date,course_score) 
 		VALUES (course_review_id_seq.nextval, #{courseId}, #{userId}, #{content}, sysdate, #{courseScore})
 	</insert>
 	
 	<!-- 코스리뷰 수정 -->
 	<update id="updateCourseReview" parameterType="CourseReviewDTO">
 		UPDATE course_review
 		SET content = #{content}, 
 			course_score = #{courseScore}, 
 			review_date = sysdate
 		WHERE course_review_id = #{courseReviewId}
 	</update>
 	
 	<!-- 코스리뷰 삭제 -->
 	<delete id="deleteCourseReviewByReviewId" parameterType="_int">
 		DELETE FROM course_review
 		WHERE course_review_id = #{courseReviewId}
 	</delete>

 	<!-- 코스리뷰 삭제 (코스 삭제로 인한 삭제) -->
 	<delete id="deleteCourseReviewByCourseId" parameterType="_int">
 		DELETE FROM course_review
 		WHERE course_id = #{courseId}
 	</delete>

     <!-- 유저의 코스리뷰 개수 -->
     <select id="getUserCourseReviewCount" resultType = "_int">
     	SELECT COUNT(*) FROM course_review WHERE user_id = #{userId}
     </select>

	<!-- 전체 코스리뷰 개수 조회 -->
	<select id= "getAllCourseReviewCount" resultType= "_int">
		SELECT count(course_review_id)
		FROM course_review
	</select>

	<!-- 검색된 코스리뷰 개수 조회 -->
	<select id= "getSearchedCourseReviewCount" parameterType="String" resultType= "_int">
		SELECT count(c_r.course_review_id)
  			FROM
			course_review c_r       
		<choose>
			<when test="category == 'userNickname'">
			JOIN ctg_user u ON u.user_id = c_r.user_id
		WHERE
			u.user_nickname LIKE '%' || #{keyword} || '%' 
			</when>
			
			<when test="category == 'courseName'">
			JOIN course c ON c.course_id = c_r.course_id
		WHERE
			c.course_name LIKE '%' || #{keyword} || '%'
			</when>
			
			<when test="category == 'score'">
		WHERE
			c_r.course_score >= #{keyword}	
			</when>

			<when test="category == 'reviewDate'">
		WHERE
			c_r.review_date >= #{keyword}					
			</when>
		</choose>
	</select>

	<!-- 전체 코스리뷰리스트 조회 (관리자) -->
	<select id= "getAllCourseReviewByPage" resultType="CourseReviewDTO">
		SELECT *
		FROM (
			SELECT course_review_id AS courseReviewId,
               user_id AS userId,
               course_id AS courseId,
               course_score AS courseScore,
               content AS content,
               review_date AS reviewDate,
               row_number() OVER (ORDER BY course_review_id DESC) AS r
			FROM course_review
		)
		WHERE r BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 검색된 코스리뷰리스트 조회 (관리자) -->
	<select id= "getAllCourseReviewByKeywordWithPage" resultType="CourseReviewDTO">
		SELECT *
		FROM (
			SELECT c_r.course_review_id AS courseReviewId,
	               c_r.user_id AS userId,
	               c_r.course_id AS courseId,
	               c_r.course_score AS courseScore,
	               c_r.content AS content,
	               c_r.review_date AS reviewDate,
	               row_number() OVER (ORDER BY course_review_id DESC) AS r
   			FROM
				course_review c_r       
			<choose>
				<when test="category == 'userNickname'">
				JOIN ctg_user u ON u.user_id = c_r.user_id
			WHERE
				u.user_nickname LIKE '%' || #{keyword} || '%' 
				</when>
				
				<when test="category == 'courseName'">
				JOIN course c ON c.course_id = c_r.course_id
			WHERE
				c.course_name LIKE '%' || #{keyword} || '%'
				</when>
				
				<when test="category == 'score'">
			WHERE
				c_r.course_score >= #{keyword}	
				</when>

				<when test="category == 'reviewDate'">
			WHERE
				c_r.review_date >= #{keyword}					
				</when>
			</choose>	
		)		
		WHERE r BETWEEN #{startRow} AND #{endRow}			
	</select>

	<!-- 코스리뷰왕 -->
	<select id="getReviewTop3" resultType="java.lang.Integer">
    <![CDATA[
	    SELECT countList.user_id
	    FROM (
	          SELECT user_id, COUNT(user_id) AS countReview
	          FROM course_review
	          GROUP BY user_id
	          HAVING COUNT(user_id) > 1
	          ORDER BY COUNT(user_id) DESC NULLS LAST
	    	  ) countList
	    WHERE ROWNUM <= 3
	 ]]>
	</select>

 </mapper>