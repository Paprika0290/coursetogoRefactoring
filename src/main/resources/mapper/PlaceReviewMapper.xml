<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.coursetogo.mapper.review.PlaceReviewMapper">

	<!-- 장소리뷰 Id로 장소리뷰 검색 -->
     <select id="getPlaceReviewByReviewId" resultType="PlaceReviewDTO">
        SELECT place_review_id AS placeReviewId,
               user_id AS userId,
               place_id AS placeId,
               place_score AS placeScore,
               review_date AS reviewDate
 		FROM place_review
 		WHERE place_review_id = #{placeReviewId}
 	</select>
 	
     <!-- UserId로 장소리뷰 검색하기 -->
     <select id="getPlaceReviewByUserId" parameterType="_int" resultType="PlaceReviewDTO">
         SELECT place_review_id AS placeReviewId,
                user_id AS userId,
                place_id AS placeId,
                place_score AS placeScore,
                review_date AS reviewDate
         FROM place_review
         WHERE user_id = #{userId} 
     </select>
 	
     <!-- UserId + PlaceId로 장소리뷰 검색하기 -->
     <select id="getPlaceReviewByUserIdAndPlaceId" parameterType="_int" resultType="PlaceReviewDTO">
         SELECT place_review_id AS placeReviewId,
                user_id AS userId,
                place_id AS placeId,
                place_score AS placeScore,
                review_date AS reviewDate
         FROM place_review
         WHERE user_id = #{userId}
           AND place_id = #{placeId}  
     </select>
 	
    <!-- 장소리뷰 등록 -->
 	<insert id="insertPlaceReview" parameterType="PlaceReviewDTO">
 		INSERT INTO place_review (place_review_id, place_id, user_id, review_date,place_score) 
 		VALUES (place_review_id_seq.nextval, #{placeId}, #{userId}, sysdate, #{placeScore} )

 	</insert>
 	
 	<!-- 장소리뷰 수정 -->
 	<update id="updatePlaceReview" parameterType="PlaceReviewDTO">
 		UPDATE place_review
 		SET place_score = #{placeScore}, 
 	        review_date = sysdate
 		WHERE place_id = #{placeId}
 	</update>
 	
 	<!-- 장소리뷰 삭제 / 리뷰아이디를 통해 -->
 	<delete id="deletePlaceReviewByReviewId" parameterType="_int">
 		DELETE FROM place_review
 		WHERE place_review_id = #{placeReviewId}
 	</delete>
 	
 	<!-- 장소리뷰 삭제 / 장소아이디 + 유저아이디를 통해 -->
 	<delete id="deletePlaceReviewByPlaceIdAndUserId" parameterType="_int">
 		DELETE FROM place_review
 		WHERE place_id = #{placeId} AND user_id = #{userId}
 	</delete>
 	
	<!-- 전체 장소리뷰 개수 조회 -->
	<select id= "getAllPlaceReviewCount" resultType= "_int">
		SELECT count(place_review_id)
		FROM place_review
	</select>

	<!-- 검색된 장소리뷰 개수 조회 -->
	<select id= "getSearchedPlaceReviewCount" parameterType="String" resultType= "_int">
		SELECT count(place_review_id)
		FROM
			place_review p_r       
		<choose>
			<when test="category == 'userNickname'">
			JOIN ctg_user u ON u.user_id = p_r.user_id
		WHERE
			u.user_nickname LIKE '%' || #{keyword} || '%' 
			</when>
			
			<when test="category == 'placeName'">
			JOIN place p ON p.place_id = p_r.place_id
		WHERE
			p.place_name LIKE '%' || #{keyword} || '%'
			</when>
			
			<when test="category == 'score'">
		WHERE
			p_r.place_score >= #{keyword}	
			</when>

			<when test="category == 'reviewDate'">
		WHERE
			p_r.review_date >= #{keyword}					
			</when>
		</choose>
	</select>
 	
	<!-- 전체 코스리뷰리스트 조회 (관리자) -->
	<select id= "getAllPlaceReviewByPage" resultType="PlaceReviewDTO">
		SELECT *
		FROM (
			SELECT place_review_id AS placeReviewId,
	               user_id AS userId,
	               place_id AS placeId,
	               place_score AS placeScore,
	               review_date AS reviewDate,
	               row_number() OVER (ORDER BY place_review_id DESC) AS r
			FROM place_review
		)
		WHERE r BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 검색된 코스리뷰리스트 조회 (관리자) -->
	<select id= "getAllPlaceReviewByKeywordWithPage" resultType="PlaceReviewDTO">
		SELECT *
		FROM (
			SELECT p_r.place_review_id AS placeReviewId,
	               p_r.user_id AS userId,
	               p_r.place_id AS placeId,
	               p_r.place_score AS placeScore,
	               p_r.review_date AS reviewDate,
	               row_number() OVER (ORDER BY place_review_id DESC) AS r
   			FROM
				place_review p_r       
			<choose>
				<when test="category == 'userNickname'">
				JOIN ctg_user u ON u.user_id = p_r.user_id
			WHERE
				u.user_nickname LIKE '%' || #{keyword} || '%' 
				</when>
				
				<when test="category == 'placeName'">
				JOIN place p ON p.place_id = p_r.place_id
			WHERE
				p.place_name LIKE '%' || #{keyword} || '%'
				</when>
				
				<when test="category == 'score'">
			WHERE
				p_r.place_score >= #{keyword}	
				</when>

				<when test="category == 'reviewDate'">
			WHERE
				p_r.review_date >= #{keyword}					
				</when>
			</choose>	
		)		
		WHERE r BETWEEN #{startRow} AND #{endRow}			
	</select> 	
 	
 	<!-- 장소리뷰왕 -->
	<select id="getReviewTop3" resultType="java.lang.Integer">
    <![CDATA[
	    SELECT countList.user_id
	    FROM (
	          SELECT user_id, COUNT(user_id) AS countReview
	          FROM place_review
	          GROUP BY user_id
	          HAVING COUNT(user_id) > 1
	          ORDER BY COUNT(user_id) DESC NULLS LAST
	    	  ) countList
	    WHERE ROWNUM <= 3
	 ]]>
	</select>
 	
 </mapper>